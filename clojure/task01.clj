(def res 0)
(def res2 0)
(def input_vals (with-open [rdr (clojure.java.io/reader "../input/input01.txt")] (reduce conj [] (line-seq rdr))))
(doseq [n (range 1 (count input_vals))]
  (def prev (read-string (nth input_vals (- n 1))))
  (def cur (read-string (nth input_vals n)))
  (if (> cur prev)
    (def res (+ res 1))
    (println "False!")))
(println res)
(def prev_triple_measure (+ (read-string (nth input_vals 0)) (read-string (nth input_vals 1)) (read-string (nth input_vals 2))))
(doseq [n (range 3 (count input_vals))]
  (def cur_triple_measure (+ (read-string (nth input_vals n)) (read-string (nth input_vals (- n 1))) (read-string (nth input_vals (- n 2)))))
  (if (> cur_triple_measure prev_triple_measure)
    (def res2 (+ res2 1))
    (println "False!"))
  (def prev_triple_measure cur_triple_measure))
(println res2)
